#!/bin/bash
#
#########################################################################
#
# Purpose:	Xray Sees Inside
# Author:	Grandt Ashworth
# Date:		12/2020
#
#########################################################################
#
# Derivations and Declarations
#
#########################################################################
#
FUNCTIONHEADERS=no						# yes | no
#
#########################################################################
#
declare -a _partitionlist=()
#
#########################################################################
#
# Functions
#
#########################################################################
#
__hostname(){
	[[ "${FUNCTIONHEADERS}" == "yes" ]] && echo ${FUNCNAME[0]}
	_hostname=$(hostname -s)
	#
	case $_hostname in
		localhost)
		exit 1
		;;
		*)
		echo $_hostname
		;;
	esac
}
#
__arch(){
	[[ "${FUNCTIONHEADERS}" == "yes" ]] && echo ${FUNCNAME[0]}
	_arch=$($(_arch=$(uname -m))
		[[ ! -z $_arch ]] && { 
			exit 1
			} || { 
			echo $($(which uname) -m)
		})
		exit_status=$?
	[[ $exit_status -eq 0 ]] && {
		echo $_arch
	} || {
		exit 1
	}
}
#
__kernel(){
	[[ "${FUNCTIONHEADERS}" == "yes" ]] && echo ${FUNCNAME[0]}
	_kernel=$($(_kernel=$(uname -r))
		[[ ! -z $_kernel ]] && {
			exit 1
			} || {
			echo $($(which uname) -r)
		})
		exit_status=$?
	[[ $exit_status -eq 0 ]] && {
		echo $_kernel
	} || {
		exit 1
	}
}
#
__memory(){
	[[ "${FUNCTIONHEADERS}" == "yes" ]] && echo ${FUNCNAME[0]}
	_memory="/proc/meminfo"
		[[ -z $_memory ]] && {
			exit 1
			} || {
			_totalmemory=$(cat $_memory|awk '/MemTotal:/{print $2}')
			_totalmemoryfree=$(cat $_memory|awk '/MemFree:/{print $2}')
			_totalmemoryavailable=$(cat $_memory|awk '/MemAvailable:/{print $2}')
			_totalswap=$(cat $_memory|awk '/SwapTotal:/{print $2}')
			_totalswapfree=$(cat $_memory|awk '/SwapFree:/{print $2}')
			}
			exit_status=$?
	[[ $exit_status -eq 0 ]] && {
		echo $_totalmemory $_totalmemoryfree $_totalmemoryavailable $_totalswap $_totalswapfree
	} || {
		exit 1
	}
}
#
__partitions(){
	[[ "${FUNCTIONHEADERS}" == "yes" ]] && echo ${FUNCNAME[0]}
	_partitions="/proc/partitions"
	_partitioncount=$(($(cat $_partitions| wc -l) -2))
	[[ -z $_partitions ]] && {
		exit 1
		} || {
		_partfilelength=$_partitioncount
		[[ $_partitioncount -ne 0 ]] && {
			cat $_partitions | tail -n $_partfilelength | awk '{print $4}' | while read LABEL; do
				_partitionlist+=(${LABEL})
				_partitioncount=$(( $_partitioncount - 1 ))
				[[ $_partitioncount -eq 0 ]] && {
					echo ${_partitionlist[@]}
				}
			done
		}
	}
}
#
#########################################################################
#
# Main Loop
#
#########################################################################
#
RUNLIST="__hostname __arch __kernel __memory __partitions"
#
for RUN in $RUNLIST; do $RUN; done
#
#########################################################################
#
# Housekeeping
#
#########################################################################
